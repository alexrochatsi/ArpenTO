
package br.com.datasind.controller.cad;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;

import org.primefaces.context.RequestContext;

import br.com.datasind.aplicacao.ApplicationException;
import br.com.datasind.controller.CadastroControler;
import br.com.datasind.conversao.util.Codificador;
import br.com.datasind.dataModel.UsuarioCartorioDataModel;
import br.com.datasind.entidade.Cartorio;
import br.com.datasind.entidade.UsuarioCartorio;
import br.com.datasind.gerente.GerenteControleAcesso;
import br.com.datasind.validacao.ValidacaoException;

@ManagedBean(name="usuarioCartorio")
@ViewScoped
public class UsuarioCartorioController extends CadastroControler{

   private static final long serialVersionUID=1893513995855967747L;
   private UsuarioCartorio usuarioCartorio;
   private List<UsuarioCartorio> listaUsuariosCartorio;
   private UsuarioCartorio usuarioCartorioSelecionado;
   private UsuarioCartorioDataModel usuarioCartorioDM;
   private List<Cartorio> cartorios=null;
   private String UID;
   private Integer tipoRequisicao;// 1 - Ativar email, 2 - Solicitar nova senha
   private String validaEmail;

   public void loadModel() {
	  ExternalContext ec=FacesContext.getCurrentInstance().getExternalContext();
	  if(getUID() != null && getTipoRequisicao() == 2) {
		 try {
			ec.redirect(ec.getRequestContextPath() + "/test/usuarioCartorioSenha.jsf?uid=" + getUID());
		 } catch (IOException e) {
			e.printStackTrace();
		 }
	  }
   }

   public void acaoAlterar(ActionEvent event) {
	  GerenteControleAcesso gerenteControleAcesso=getFabricaGerente().getGerenteControleAcesso();
	  RequestContext context=RequestContext.getCurrentInstance();
	  try {
		 UsuarioCartorio usutemp=new UsuarioCartorio();
		 usutemp=(gerenteControleAcesso.obterUsuarioCartorioPorId(usuarioCartorio));
		 getUsuarioCartorio().setSenha(usutemp.getSenha());
		 getUsuarioCartorio().setDataUltimoLogin(usutemp.getDataUltimoLogin());
		 getUsuarioCartorio().setVersao(usutemp.getVersao());

		 gerenteControleAcesso.atualizarEntidade(getUsuarioCartorio());
		 
		 context.execute("PF('dlgStatus').hide()");
		 context.update("formCadastro");
		 acaoLimpar();
	  } catch (ApplicationException e) {
		 mensageiro(ERROR , "Nao foi possivel atualizar o cadastro do usuario.");
		 LOGGER.error(e);
		 acaoLimpar();
		 return;
	  } catch (ValidacaoException e) {
		 mensageiro(WARNING , e.getMessage().toString());
		 LOGGER.error(e);
		 acaoLimpar();
		 return;
	  }
	  mensageiro(INFO , "Usuario alterado com sucesso.");
   }

   public void acaoExcluir(ActionEvent event) {

	  GerenteControleAcesso gerenteControleAcesso=getFabricaGerente().getGerenteControleAcesso();

	  try {
		 gerenteControleAcesso.excluirEntidade(getUsuarioCartorio());
		 acaoLimpar();
	  } catch (ApplicationException e) {
		 mensageiro(ERROR , "Nao foi possivel excluir usuario.");
		 LOGGER.error(e);
		 return;
	  }

	  mensageiro(INFO , "Usuario excluido com sucesso.");
   }

   public void acaoIncluir(ActionEvent event) {
	  GerenteControleAcesso gerenteControleAcesso=getFabricaGerente().getGerenteControleAcesso();
	  RequestContext context=RequestContext.getCurrentInstance();
	  try {

		 if((gerenteControleAcesso.obterUsuariosCartorioPorLogin(getUsuarioCartorio().getNomeLogin()).size() > 0)) {
			mensageiro(WARNING , "Esse usuário já existe, tente novamente.");
			return;
		 }

		 getUsuarioCartorio().setSenha(Codificador.codificaSenhaMD5("tecnotins"));
		 getUsuarioCartorio().setDataCadastro(new Date());
		 getUsuarioCartorio().setFlagAtivo(false);
		 getUsuarioCartorio().setUID(Codificador.geraUID(20));// gera id especifica do usuario tamanho 20
		 gerenteControleAcesso.incluirEntidade(getUsuarioCartorio());

		 mensageiro(INFO , "Usuario " + getUsuarioCartorio().getNome() + " cadastrado com sucesso! Aguarde a aprovação do Administrador.");
		 context.execute("PF('dlgNovoUsuario').hide()");
		 acaoLimpar();
		 setUsuarioCartorio(null);
	  } catch (ApplicationException e) {
		 mensageiro(ERROR , "Nao foi possivel cadastrar o usuario.");
		 LOGGER.error(e);
		 return;
	  } catch (ValidacaoException e) {
		 mensageiro(ERROR , e.getMessage());
		 LOGGER.equals(e);
		 return;
	  }
   }

   public void validaUsuarioCartorio() {
	  GerenteControleAcesso gerenteControleAcesso=getFabricaGerente().getGerenteControleAcesso();
	  RequestContext context=RequestContext.getCurrentInstance();
	  
	  try {
		 if((gerenteControleAcesso.obterUsuariosCartorioPorLogin(getUsuarioCartorio().getNomeLogin()).size() > 0)) {
			mensageiro(WARNING , "Nome de usuário já existe, tente novamente.");
			getUsuarioCartorio().setNomeLogin("");
			context.update("formCadastroUsuario");
			return;
		 }else{
			mensageiro(INFO, "O nome de usuário pode ser usado.");
		 }
	  } catch (ApplicationException | ValidacaoException e) {
		 e.printStackTrace();
	  }
   }

   public void acaoLimpar() {
	  setUsuarioCartorio(null);
	  setusuarioCartorioSelecionado(null);
	  setListaUsuariosCartorio(null);
	  setUsuarioCartorioDM(null);
	  setValidaEmail(null);
   }

   public UsuarioCartorio getUsuarioCartorio() {
	  if(usuarioCartorio == null) {
		 usuarioCartorio=new UsuarioCartorio();
	  }
	  return usuarioCartorio;
   }

   public void carregaUsuarioCartorio() {
	  RequestContext context=RequestContext.getCurrentInstance();
	  usuarioCartorio=getUsuarioCartorioSelecionado();
	  context.update("formStatusUsuario");
   }

   public void setUsuarioCartorio(UsuarioCartorio usuarioCartorio) {
	  this.usuarioCartorio=usuarioCartorio;
   }

   public List<UsuarioCartorio> getListaUsuariosCartorio() {
	  if(listaUsuariosCartorio == null) {
		 try {
			GerenteControleAcesso gerenteControleAcesso=getFabricaGerente().getGerenteControleAcesso();
			listaUsuariosCartorio=new ArrayList<UsuarioCartorio>();

			listaUsuariosCartorio=gerenteControleAcesso.obterListaUsuariosCartorio();
		 } catch (ApplicationException e) {
			mensageiro(ERROR , "Erro ao buscar lista de Usuarios");
		 }
	  }
	  return listaUsuariosCartorio;
   }

   public void setListaUsuariosCartorio(List<UsuarioCartorio> listaUsuariosCartorio) {
	  this.listaUsuariosCartorio=listaUsuariosCartorio;
   }

   public UsuarioCartorio getUsuarioCartorioSelecionado() {
	  if(usuarioCartorioSelecionado == null) {
		 usuarioCartorioSelecionado=new UsuarioCartorio();
	  }
	  return usuarioCartorioSelecionado;
   }

   public void setusuarioCartorioSelecionado(UsuarioCartorio usuarioCartorioSelecionado) {
	  this.usuarioCartorioSelecionado=usuarioCartorioSelecionado;
   }

   public UsuarioCartorioDataModel getUsuarioCartorioDM() {
	  if(usuarioCartorioDM == null) {
		 usuarioCartorioDM=new UsuarioCartorioDataModel(getListaUsuariosCartorio());
	  }
	  return usuarioCartorioDM;
   }

   public void setUsuarioCartorioDM(UsuarioCartorioDataModel usuarioCartorioDM) {
	  this.usuarioCartorioDM=usuarioCartorioDM;
   }

   public void adicionar(ActionEvent event) {
	  System.out.println(usuarioCartorio.getNome());
   }

   public List<Cartorio> getCartorios() {
	  if(cartorios == null) {
		 try {
			GerenteControleAcesso gerenteControleAcesso=getFabricaGerente().getGerenteControleAcesso();
			cartorios=new ArrayList<Cartorio>();
			cartorios=gerenteControleAcesso.obterCartorios();
		 } catch (ApplicationException e) {
			mensageiro(ERROR , "Erro ao buscar lista de Cartórios");
		 }
	  }
	  return cartorios;
   }

   public void setCartorios(List<Cartorio> cartorios) {
	  this.cartorios=cartorios;
   }

   public String getUID() {
	  return UID;
   }

   public void setUID(String UID) {
	  this.UID=UID;
   }

   public Integer getTipoRequisicao() {
	  return tipoRequisicao;
   }

   public void setTipoRequisicao(Integer tipoRequisicao) {
	  this.tipoRequisicao=tipoRequisicao;
   }

   public String getValidaEmail() {
	  return validaEmail;
   }

   public void setValidaEmail(String validaEmail) {
	  this.validaEmail=validaEmail;
   }

}
